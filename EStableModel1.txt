package visual;
  import java.util.ArrayList;
  import java.util.List;
import javax.swing.table.AbstractTableModel;

import model.Pessoa;
   
   
  public class ESTableModel extends AbstractTableModel {
      
      private List<Pessoa> usuarios;
       private String[] colunas = new String[]{  
          "Código","Nome", "Senha", "CPF","Data de Nascimento"};
      
      public ESTableModel(List<Pessoa> usuarios) {
          this.usuarios = usuarios;
      }
      
      public ESTableModel(){
       this.usuarios = new ArrayList<Pessoa>();
      }
   
      public int getRowCount() {
          return usuarios.size();
      }
   
      public int getColumnCount() {
          return colunas.length;
      }
      
      @Override
      public String getColumnName(int columnIndex){
        return colunas[columnIndex];
      }    
      
       @Override  
      public Class<?> getColumnClass(int columnIndex) {  
          return String.class;  
      }
    
      
      public void setValueAt(Pessoa aValue, int rowIndex) {  
          Pessoa usuario = usuarios.get(rowIndex);
          
          usuario.setCod(aValue.getCod());
          usuario.setUsuario(aValue.getUsuario());
          usuario.setSenha(aValue.getSenha());    
          usuario.setCpf(aValue.getCpf());
          usuario.setBdate(aValue.getBdate());
    
          fireTableCellUpdated(rowIndex, 0);  
          fireTableCellUpdated(rowIndex, 1);  
          fireTableCellUpdated(rowIndex, 2);  
          fireTableCellUpdated(rowIndex, 3);
          fireTableCellUpdated(rowIndex, 4);
    
      }
      
      @Override  
      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {  
        Pessoa usuario = usuarios.get(rowIndex);
    
       switch (columnIndex) {
           case 0:  
               usuario.setCod(((Integer) aValue).parseInt(toString()));
           case 1:  
               usuario.setUsuario(aValue.toString());             
           case 2:  
               usuario.setSenha(aValue.toString());
           case 3:  
               usuario.setCpf(aValue.toString());   
           case 4:  
               usuario.setBdate(aValue.toString());   
    
           default:  
               System.err.println("Índice da coluna inválido");
       }  
       fireTableCellUpdated(rowIndex, columnIndex);  
       }      
      
   
      public Object getValueAt(int rowIndex, int columnIndex) {
          Pessoa usuarioSelecionado = usuarios.get(rowIndex);
          String valueObject = null;
          switch(columnIndex){
              case 0: valueObject = usuarioSelecionado.getCod(); break;
              case 1: valueObject = usuarioSelecionado.getUsuario(); break;
              case 2 : valueObject = usuarioSelecionado.getSenha(); break;
              case 3 : valueObject = usuarioSelecionado.getCpf(); break;
              case 4 : valueObject = usuarioSelecionado.getBdate(); break;
              default: System.err.println("Índice inválido para propriedade do bean Usuario.class");
          }
          
          return valueObject;
      }
      
      @Override  
      public boolean isCellEditable(int rowIndex, int columnIndex) {  
          return false;  
      }  
    
    
      public Pessoa getUsuario(int indiceLinha) {  
          return usuarios.get(indiceLinha);  
      }  
      
      public void addUsuario(Pessoa u) {      
          usuarios.add(u);  
    
    
          int ultimoIndice = getRowCount() - 1;  
    
          fireTableRowsInserted(ultimoIndice, ultimoIndice);  
      }  
    
      
      public void removeUsuario(int indiceLinha) {  
          usuarios.remove(indiceLinha);  
    
          fireTableRowsDeleted(indiceLinha, indiceLinha);  
      }  
      
      
      public void addListaDeUsuarios(List<Pessoa> novosUsuarios) {  
          
          int tamanhoAntigo = getRowCount();      
          usuarios.addAll(novosUsuarios);    
          fireTableRowsInserted(tamanhoAntigo, getRowCount() - 1);  
      }  
      
      public void limpar() {  
          usuarios.clear();    
          fireTableDataChanged();  
      }  
    
      public boolean isEmpty() {  
          return usuarios.isEmpty();  
      }  
      
  }